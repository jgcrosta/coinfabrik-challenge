import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { type ChartData, BarChart } from "~/components/chart/bar-chart";
import { ChartComponent } from "~/components/chart/get-chart";
import { SelectComponent } from "~/components/select-components/get-select";
import { Stat } from "~/components/stat";
import { Data, type Quote } from "~/interfaces/interfaces";
import { api } from "~/utils/api";
import { cg_data } from "~/utils/mockdata";

import { getUnifiedRankingData } from "~/utils/unified-ranking";

const Home: NextPage = () => {
  const [limit, setLimit] = useState(10);
  const [chartType, setChartType] = useState("Bar");
  const [isRankChecked, setIsRankChecked] = useState(false);
  const [source, setSource] = useState("CoinGecko");
  const [selectedSymbol, setSelectedSymbol] = useState("N/A");
  const [selectedQuote, setSelectedQuote] = useState<Quote>({
    market_cap: 0,
    volume_24h: 0,
  });

  // Load cgData from local utils/mockdata.ts file (cg_data object)
  // const cgData = cg_data;

  const {
    data: cmcData,
    isLoading: cmcIsLoading,
    isError: cmcIsError,
  } = api.coinMarketCap.latest.useQuery({
    start: 1,
    limit: 300,
    convert: "USD",
    sort: "market_cap",
    cryptocurrency_type: "coins",
  });

  // // Get CoinGecko data
  const {
    data: cgData,
    isLoading: cgIsLoading,
    isError: cgIsError,
  } = api.coinGecko.latest.useQuery(
    {
      limit: 300,
    },
    {
      onSuccess: (receivedData) => {
        receivedData?.forEach((item) => {
          item.symbol = item.symbol.toUpperCase();
        });
        setSelectedQuote({
          market_cap: receivedData[0]?.market_cap || 0,
          volume_24h: receivedData[0]?.total_volume || 0,
        });
        setSelectedSymbol(receivedData[0]?.symbol || "N/A");
      },
    }
  );
  if (cmcIsError) return <div>Error getting CoinMarketCap Data</div>;
  if (cmcIsLoading) return <div>Loading CoinMarketCap Data</div>;
  if (cgIsError) return <div>Error getting CoinGecko Data</div>;
  if (cgIsLoading) return <div>Loading CoinGecko Data</div>;

  const findDataFromSymbol = (symbol: string) => {
    if (source !== "Unified Ranking") {
      const foundData = data.find((item) => item.symbol === symbol);
      if (!foundData) return;
      setSelectedSymbol(foundData.symbol);
      setSelectedQuote({
        market_cap: foundData.market_cap,
        volume_24h: foundData.total_volume,
      });
    } else {
      const foundData = unifiedRankingData.find(
        (item) => item.symbol === symbol
      );
      if (!foundData) return;
      setSelectedSymbol(foundData.symbol);
      setSelectedQuote({
        market_cap: foundData["Market Cap."],
        volume_24h: foundData["Volume [24H]"],
      });
    }
  };

  const data = source === "CoinGecko" ? cgData : cmcData;

  const processedData = data.map<ChartData>((item) => ({
    symbol: item.symbol,
    name: item.name,
    "Market Cap.": item.market_cap,
    "Volume [24H]": item.total_volume,
  }));

  // If isRankChecked is false, sort the data by "Market Cap." property, if isRankChecked is true, sort the data by "Volume [24H]" property.
  processedData.sort((a, b) =>
    isRankChecked
      ? b["Volume [24H]"] - a["Volume [24H]"]
      : b["Market Cap."] - a["Market Cap."]
  );

  const unifiedRankingData = getUnifiedRankingData(cgData, cmcData);

  return (
    <>
      <Head>
        <title>Crypto Ranking</title>
        <meta name="description" content="Generated by Jose" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen w-full flex-col items-center justify-center bg-base-100">
        <div className="w-full bg-secondary p-2 font-mono text-4xl">
          <div className="text-center">Crypto Ranking</div>
        </div>
        <div className="mt-4 flex w-full items-center justify-center px-10">
          <Stat name={selectedSymbol} quote={selectedQuote} />
        </div>
        <div className="flex h-full w-full flex-col">
          <div className="mt-4 grid grid-cols-4 ">
            <SelectComponent
              limit={limit}
              chartType={chartType}
              setChartType={(chartType) => {
                setChartType(chartType);
                if (chartType === "Parallel Coordinates")
                  setIsRankChecked(false);
              }}
              setLimit={(limit) => setLimit(limit)}
              isRankChecked={isRankChecked}
              setIsRankChecked={(isRankChecked) =>
                setIsRankChecked(isRankChecked)
              }
              source={source}
              setSource={(source) => {
                setSource(source);
                if (source === "Unified Ranking") setIsRankChecked(false);
              }}
            />
          </div>
          {/* Chart */}
          <div className="flex h-full w-full items-center">
            <ChartComponent
              limit={limit}
              chartType={chartType}
              isRankChecked={isRankChecked}
              processedData={processedData}
              findDataFromSymbol={(symbol: string) =>
                findDataFromSymbol(symbol)
              }
              unifiedData={unifiedRankingData}
              source={source}
            />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
