import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { type ChartData, BarChart } from "~/components/bar-chart";
import { SelectChartDropDown } from "~/components/select-chart";
import { SelectLimitDropDown } from "~/components/select-limit";
import { SelectSourceDropDown } from "~/components/select-source";
import { Stat } from "~/components/stat";
import { Data, type Quote } from "~/interfaces/interfaces";
import { api } from "~/utils/api";
import { cg_data } from "~/utils/mockdata";
import { ParallelCoordinatesChart } from "~/components/paralell-coordinates-chart";
import { TreeMapChart } from "~/components/tree-map-chart";

const Home: NextPage = () => {
  const [limit, setLimit] = useState(10);
  const [chartType, setChartType] = useState("Bar" as string);
  const [isRankChecked, setIsRankChecked] = useState(false);
  const [source, setSource] = useState("CoinGecko" as string);
  const [selectedSymbol, setSelectedSymbol] = useState("");
  const [selectedQuote, setSelectedQuote] = useState<Quote>({
    market_cap: 0,
    volume_24h: 0,
  });

  let data: Data[] = [];
  const findDataFromSymbol = (symbol: string) => {
    const foundData = data.find((item) => item.symbol === symbol);
    if (!foundData) return;
    setSelectedQuote({
      market_cap: foundData.market_cap,
      volume_24h: foundData.total_volume,
    });
    setSelectedSymbol(symbol);
  };

  // Load cgData from local utils/mockdata.ts file (cg_data object)
  // const cgData = cg_data;

  const {
    data: cmcData,
    isLoading: cmcIsLoading,
    isError: cmcIsError,
  } = api.coinMarketCap.latest.useQuery({
    start: 1,
    limit: 300,
    convert: "USD",
    sort: "market_cap",
    cryptocurrency_type: "coins",
  });

  // Get CoinGecko data
  const {
    data: cgData,
    isLoading: cgIsLoading,
    isError: cgIsError,
  } = api.coinGecko.latest.useQuery(
    {
      limit: 10,
    },
    {
      onSuccess: (receivedData) => {
        // Set the data source to use based on "source" state. If sourse is "CoinGecko", use cgData, if source is "CoinMarketCap", use cmcData
        if (!cgData || !cmcData) return;
        data = source === "CoinGecko" ? cgData : cmcData;
        findDataFromSymbol(receivedData[0]?.symbol || "N/A");
      },
    }
  );

  // UseEffect to set the initial symbol and quote
  if (cmcIsError || cgIsError) return <div>Error</div>;
  if (cmcIsLoading || cgIsLoading) return <div>Loading...</div>;

  if (!data) return <div>Error</div>;

  const processedData = data.map<ChartData>((item) => ({
    symbol: item.symbol,
    name: item.name,
    "Market Cap.": item.market_cap,
    "Volume [24H]": item.total_volume,
  }));

  if (!processedData) return <div>Error</div>;
  if (processedData.some((item) => !item)) return <div>Error</div>;

  // If isRankChecked is false, sort the data by "Market Cap." property, if isRankChecked is true, sort the data by "Volume [24H]" property.
  processedData?.sort((a, b) =>
    isRankChecked
      ? b["Volume [24H]"] - a["Volume [24H]"]
      : b["Market Cap."] - a["Market Cap."]
  );

  return (
    <>
      <Head>
        <title>Crypto Ranking</title>
        <meta name="description" content="Generated by Jose" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen w-full flex-col items-center justify-center bg-base-100">
        <div className="w-full bg-secondary p-2 font-mono text-4xl">
          <div className="text-center">Crypto Ranking</div>
        </div>
        <div className="mt-4 flex w-full items-center justify-center px-10">
          <Stat name={selectedSymbol} quote={selectedQuote} />
        </div>
        <div className="flex h-full w-full flex-col">
          <div className="mt-4 grid grid-cols-4 ">
            {/* Select Chart DropDown */}
            <div className="flex items-center justify-center">
              <span className="mr-2">Chart type:</span>
              <SelectChartDropDown
                chartType={chartType}
                setChartType={(newChartType) => setChartType(newChartType)}
              />
            </div>
            {/* Select Limit DropDown */}
            <div className="flex items-center justify-center">
              <span className="mr-2">Request limit:</span>
              <SelectLimitDropDown
                limit={limit}
                setLimit={(newLimit) => setLimit(newLimit)}
              />
            </div>
            {/* Select Rank Toggle */}
            <div className="flex items-center justify-center">
              <span className="mr-2">Market Cap.</span>
              <input
                type="checkbox"
                className="toggle bg-opacity-100"
                checked={isRankChecked}
                onChange={() => setIsRankChecked(!isRankChecked)}
              />
              <span className="ml-4 mr-4">Volume [24H]</span>
            </div>
            {/* Select Source DropDown */}
            <div className="flex items-center justify-center">
              <span className="mr-2">Source:</span>
              <SelectSourceDropDown
                source={source}
                setSource={(newSource) => setSource(newSource)}
              />
            </div>
          </div>
          {/* Chart */}
          <div className="flex h-full w-full items-center">
            {chartType === "Bar" && (
              <BarChart
                preProcessedData={processedData.slice(0, limit)}
                onDataClick={(dataSymbol) => findDataFromSymbol(dataSymbol)}
              />
            )}
            {chartType === "Parallel Coordinates" && (
              <ParallelCoordinatesChart data={processedData.slice(0, limit)} />
            )}
            {chartType === "Tree Map" && (
              <TreeMapChart
                preProcessedData={processedData.slice(0, limit)}
                onDataClick={(dataSymbol) => findDataFromSymbol(dataSymbol)}
                dataKey={isRankChecked ? "Volume [24H]" : "Market Cap."}
              />
            )}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
